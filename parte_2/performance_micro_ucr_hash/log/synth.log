Qflow synthesis logfile created on dom 25 jul 23:50:07 CST 2021
Running yosys for verilog parsing and synthesis
yosys  -s micro_ucr_hash_mod.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `micro_ucr_hash_mod.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/isaac/Desktop/Microelectrónica/Proyecto/Parte_2/performance_micro_ucr_hash/source/micro_ucr_hash_mod.v
Parsing Verilog input from `/home/isaac/Desktop/Microelectrónica/Proyecto/Parte_2/performance_micro_ucr_hash/source/micro_ucr_hash_mod.v' to AST representation.
Generating RTLIL representation for module `\cargar_datos'.
modulos.v:31: Warning: Range [159:32] select out of bounds on signal `\bloque': Setting 32 MSB bits to undef.
modulos.v:31: Warning: Range [159:32] select out of bounds on signal `\bloque': Setting 32 MSB bits to undef.
Generating RTLIL representation for module `\generar_W'.
Generating RTLIL representation for module `\algo_hash'.
Generating RTLIL representation for module `\comparador_target_hash'.
Generating RTLIL representation for module `\cargar_datos_mod'.
modulos_mod.v:28: Warning: Range [159:32] select out of bounds on signal `\bloque': Setting 32 MSB bits to undef.
modulos_mod.v:28: Warning: Range [159:32] select out of bounds on signal `\bloque': Setting 32 MSB bits to undef.
Generating RTLIL representation for module `\control_bounty'.
Generating RTLIL representation for module `\micro_ucr_hash_mod_module'.
Generating RTLIL representation for module `\micro_ucr_hash_mod'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \micro_ucr_hash_mod
Used module:     \control_bounty
Used module:     \micro_ucr_hash_mod_module
Used module:         \comparador_target_hash
Used module:         \algo_hash
Used module:         \generar_W
Used module:         \cargar_datos_mod

3.1.2. Executing AST frontend in derive mode using pre-parsed AST for module `\cargar_datos_mod'.
Parameter \NUM_BLOQUES_PARALELOS = 4
Generating RTLIL representation for module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
modulos_mod.v:28: Warning: Range [159:32] select out of bounds on signal `\bloque': Setting 32 MSB bits to undef.
modulos_mod.v:28: Warning: Range [159:32] select out of bounds on signal `\bloque': Setting 32 MSB bits to undef.

3.1.3. Executing AST frontend in derive mode using pre-parsed AST for module `\control_bounty'.
Parameter \NUM_BLOQUES_PARALELOS = 4
Generating RTLIL representation for module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.

3.1.4. Executing AST frontend in derive mode using pre-parsed AST for module `\micro_ucr_hash_mod_module'.
Parameter \NUM_BLOQUES_PARALELOS = 4
Generating RTLIL representation for module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.

3.1.5. Executing AST frontend in derive mode using pre-parsed AST for module `\micro_ucr_hash_mod_module'.
Parameter \NUM_BLOQUES_PARALELOS = 4
Found cached RTLIL representation for module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.

3.1.6. Executing AST frontend in derive mode using pre-parsed AST for module `\micro_ucr_hash_mod_module'.
Parameter \NUM_BLOQUES_PARALELOS = 4
Found cached RTLIL representation for module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.

3.1.7. Executing AST frontend in derive mode using pre-parsed AST for module `\micro_ucr_hash_mod_module'.
Parameter \NUM_BLOQUES_PARALELOS = 4
Found cached RTLIL representation for module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.

3.1.8. Analyzing design hierarchy..
Top module:  \micro_ucr_hash_mod
Used module:     $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4
Used module:     $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4
Used module:         \comparador_target_hash
Used module:         \algo_hash
Used module:         \generar_W
Used module:         \cargar_datos_mod

3.1.9. Executing AST frontend in derive mode using pre-parsed AST for module `\cargar_datos_mod'.
Parameter \NUM_BLOQUES_PARALELOS = 4
Found cached RTLIL representation for module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.

3.1.10. Analyzing design hierarchy..
Top module:  \micro_ucr_hash_mod
Used module:     $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4
Used module:     $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4
Used module:         \comparador_target_hash
Used module:         \algo_hash
Used module:         \generar_W
Used module:         $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4

3.1.11. Analyzing design hierarchy..
Top module:  \micro_ucr_hash_mod
Used module:     $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4
Used module:     $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4
Used module:         \comparador_target_hash
Used module:         \algo_hash
Used module:         \generar_W
Used module:         $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4
Removing unused module `\micro_ucr_hash_mod_module'.
Removing unused module `\control_bounty'.
Removing unused module `\cargar_datos_mod'.
Removing unused module `\cargar_datos'.
Removed 4 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 47 empty switches in `\algo_hash.$proc$modulos.v:60$109'.
Cleaned up 47 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$modulos_mod.v:49$300 in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Marked 1 switch rules as full_case in process $proc$modulos_mod.v:16$291 in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Marked 1 switch rules as full_case in process $proc$modulos.v:102$273 in module comparador_target_hash.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:49$300'.
     1/11: $4\bounty_out[23:0]
     2/11: $4\terminado_out[0:0]
     3/11: $3\bounty_out[23:0]
     4/11: $3\terminado_out[0:0]
     5/11: $2\bounty_out[23:0]
     6/11: $2\terminado_out[0:0]
     7/11: $1\bounty_out[23:0]
     8/11: $1\terminado_out[0:0]
     9/11: $0\i[31:0]
    10/11: $0\terminado_out[0:0]
    11/11: $0\bounty_out[23:0]
Creating decoders for process `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:26$295'.
     1/2: $0\bloque[127:0] [127:32]
     2/2: $0\bloque[127:0] [31:0]
Creating decoders for process `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:16$291'.
     1/1: $0\nonce[31:0]
Creating decoders for process `\comparador_target_hash.$proc$modulos.v:102$273'.
     1/4: $1\bounty[23:0]
     2/4: $1\terminado[0:0]
     3/4: $0\terminado[0:0]
     4/4: $0\bounty[23:0]
Creating decoders for process `\algo_hash.$proc$modulos.v:60$109'.
     1/106: $47\x_[7:0]
     2/106: $47\k[7:0]
     3/106: $46\x_[7:0]
     4/106: $46\k[7:0]
     5/106: $45\x_[7:0]
     6/106: $45\k[7:0]
     7/106: $44\x_[7:0]
     8/106: $44\k[7:0]
     9/106: $43\x_[7:0]
    10/106: $43\k[7:0]
    11/106: $42\x_[7:0]
    12/106: $42\k[7:0]
    13/106: $41\x_[7:0]
    14/106: $41\k[7:0]
    15/106: $40\x_[7:0]
    16/106: $40\k[7:0]
    17/106: $39\x_[7:0]
    18/106: $39\k[7:0]
    19/106: $38\x_[7:0]
    20/106: $38\k[7:0]
    21/106: $37\x_[7:0]
    22/106: $37\k[7:0]
    23/106: $36\x_[7:0]
    24/106: $36\k[7:0]
    25/106: $35\x_[7:0]
    26/106: $35\k[7:0]
    27/106: $34\x_[7:0]
    28/106: $34\k[7:0]
    29/106: $33\x_[7:0]
    30/106: $33\k[7:0]
    31/106: $32\x_[7:0]
    32/106: $32\k[7:0]
    33/106: $31\x_[7:0]
    34/106: $31\k[7:0]
    35/106: $30\x_[7:0]
    36/106: $30\k[7:0]
    37/106: $29\x_[7:0]
    38/106: $29\k[7:0]
    39/106: $28\x_[7:0]
    40/106: $28\k[7:0]
    41/106: $27\x_[7:0]
    42/106: $27\k[7:0]
    43/106: $26\x_[7:0]
    44/106: $26\k[7:0]
    45/106: $25\x_[7:0]
    46/106: $25\k[7:0]
    47/106: $24\x_[7:0]
    48/106: $24\k[7:0]
    49/106: $23\x_[7:0]
    50/106: $23\k[7:0]
    51/106: $22\x_[7:0]
    52/106: $22\k[7:0]
    53/106: $21\x_[7:0]
    54/106: $21\k[7:0]
    55/106: $20\x_[7:0]
    56/106: $20\k[7:0]
    57/106: $19\x_[7:0]
    58/106: $19\k[7:0]
    59/106: $18\x_[7:0]
    60/106: $18\k[7:0]
    61/106: $17\x_[7:0]
    62/106: $17\k[7:0]
    63/106: $16\x_[7:0]
    64/106: $16\k[7:0]
    65/106: $15\x_[7:0]
    66/106: $15\k[7:0]
    67/106: $14\x_[7:0]
    68/106: $14\k[7:0]
    69/106: $13\x_[7:0]
    70/106: $13\k[7:0]
    71/106: $12\x_[7:0]
    72/106: $12\k[7:0]
    73/106: $11\x_[7:0]
    74/106: $11\k[7:0]
    75/106: $10\x_[7:0]
    76/106: $10\k[7:0]
    77/106: $9\x_[7:0]
    78/106: $9\k[7:0]
    79/106: $8\x_[7:0]
    80/106: $8\k[7:0]
    81/106: $7\x_[7:0]
    82/106: $7\k[7:0]
    83/106: $6\x_[7:0]
    84/106: $6\k[7:0]
    85/106: $5\x_[7:0]
    86/106: $5\k[7:0]
    87/106: $4\x_[7:0]
    88/106: $4\k[7:0]
    89/106: $3\x_[7:0]
    90/106: $3\k[7:0]
    91/106: $2\x_[7:0]
    92/106: $2\k[7:0]
    93/106: $1\x_[7:0]
    94/106: $1\k[7:0]
    95/106: $0\H[23:0] [23:16]
    96/106: $0\H[23:0] [15:8]
    97/106: $0\H[23:0] [7:0]
    98/106: $0\i[31:0]
    99/106: $0\c[7:0]
   100/106: $0\b[7:0]
   101/106: $0\a[7:0]
   102/106: $0\x_[7:0]
   103/106: $0\k[7:0]
   104/106: $0\H_int[23:0] [23:16]
   105/106: $0\H_int[23:0] [15:8]
   106/106: $0\H_int[23:0] [7:0]
Creating decoders for process `\generar_W.$proc$modulos.v:41$44'.
     1/33: $0\i[31:0]
     2/33: $0\W[255:0] [255:248]
     3/33: $0\W[255:0] [247:240]
     4/33: $0\W[255:0] [239:232]
     5/33: $0\W[255:0] [231:224]
     6/33: $0\W[255:0] [223:216]
     7/33: $0\W[255:0] [215:208]
     8/33: $0\W[255:0] [207:200]
     9/33: $0\W[255:0] [199:192]
    10/33: $0\W[255:0] [191:184]
    11/33: $0\W[255:0] [183:176]
    12/33: $0\W[255:0] [175:168]
    13/33: $0\W[255:0] [167:160]
    14/33: $0\W[255:0] [159:152]
    15/33: $0\W[255:0] [151:144]
    16/33: $0\W[255:0] [143:136]
    17/33: $0\W[255:0] [135:128]
    18/33: $0\W[255:0] [127:120]
    19/33: $0\W[255:0] [119:112]
    20/33: $0\W[255:0] [111:104]
    21/33: $0\W[255:0] [103:96]
    22/33: $0\W[255:0] [95:88]
    23/33: $0\W[255:0] [87:80]
    24/33: $0\W[255:0] [79:72]
    25/33: $0\W[255:0] [71:64]
    26/33: $0\W[255:0] [63:56]
    27/33: $0\W[255:0] [55:48]
    28/33: $0\W[255:0] [47:40]
    29/33: $0\W[255:0] [39:32]
    30/33: $0\W[255:0] [31:24]
    31/33: $0\W[255:0] [23:16]
    32/33: $0\W[255:0] [15:8]
    33/33: $0\W[255:0] [7:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.\i' from process `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:49$300'.
No latch inferred for signal `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.\bounty_out' from process `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:49$300'.
No latch inferred for signal `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.\terminado_out' from process `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:49$300'.
No latch inferred for signal `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.\bloque' from process `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:26$295'.
No latch inferred for signal `\comparador_target_hash.\bounty' from process `\comparador_target_hash.$proc$modulos.v:102$273'.
No latch inferred for signal `\comparador_target_hash.\terminado' from process `\comparador_target_hash.$proc$modulos.v:102$273'.
No latch inferred for signal `\algo_hash.\H' from process `\algo_hash.$proc$modulos.v:60$109'.
No latch inferred for signal `\algo_hash.\i' from process `\algo_hash.$proc$modulos.v:60$109'.
No latch inferred for signal `\algo_hash.\H_int' from process `\algo_hash.$proc$modulos.v:60$109'.
No latch inferred for signal `\algo_hash.\a' from process `\algo_hash.$proc$modulos.v:60$109'.
No latch inferred for signal `\algo_hash.\b' from process `\algo_hash.$proc$modulos.v:60$109'.
No latch inferred for signal `\algo_hash.\c' from process `\algo_hash.$proc$modulos.v:60$109'.
No latch inferred for signal `\algo_hash.\k' from process `\algo_hash.$proc$modulos.v:60$109'.
No latch inferred for signal `\algo_hash.\x_' from process `\algo_hash.$proc$modulos.v:60$109'.
No latch inferred for signal `\generar_W.\W' from process `\generar_W.$proc$modulos.v:41$44'.
No latch inferred for signal `\generar_W.\i' from process `\generar_W.$proc$modulos.v:41$44'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.\nonce' using process `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:16$291'.
  created $dff cell `$procdff$340' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:49$300'.
Removing empty process `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:49$300'.
Removing empty process `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:26$295'.
Found and cleaned up 2 empty switches in `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:16$291'.
Removing empty process `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.$proc$modulos_mod.v:16$291'.
Found and cleaned up 1 empty switch in `\comparador_target_hash.$proc$modulos.v:102$273'.
Removing empty process `comparador_target_hash.$proc$modulos.v:102$273'.
Removing empty process `algo_hash.$proc$modulos.v:60$109'.
Removing empty process `generar_W.$proc$modulos.v:41$44'.
Cleaned up 7 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
<suppressed ~4 debug messages>
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
<suppressed ~1 debug messages>
Optimizing module comparador_target_hash.
Optimizing module algo_hash.
<suppressed ~37 debug messages>
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..
Removed 1 unused cells and 206 unused wires.
<suppressed ~11 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
checking module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
checking module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
checking module algo_hash..
checking module comparador_target_hash..
checking module generar_W..
checking module micro_ucr_hash_mod..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \algo_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comparador_target_hash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \generar_W..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash_mod..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module \algo_hash.
  Optimizing cells in module \comparador_target_hash.
  Optimizing cells in module \generar_W.
  Optimizing cells in module \micro_ucr_hash_mod.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 bits (of 32) from port B of cell $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.$add$modulos_mod.v:22$294 ($add).
Removed top 2 bits (of 8) from port A of cell algo_hash.$add$modulos.v:84$114 ($add).
Removed top 2 bits (of 8) from port A of cell algo_hash.$add$modulos.v:84$119 ($add).
Removed top 7 bits (of 8) from port A of cell algo_hash.$add$modulos.v:87$270 ($add).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~40 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4:
  creating $macc model for $add$modulos_mod.v:22$294 ($add).
  creating $alu model for $macc $add$modulos_mod.v:22$294.
  creating $alu model for $lt$modulos_mod.v:21$293 ($lt): new $alu
  creating $alu cell for $lt$modulos_mod.v:21$293: $auto$alumacc.cc:474:replace_alu$342
  creating $alu cell for $add$modulos_mod.v:22$294: $auto$alumacc.cc:474:replace_alu$347
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module algo_hash:
  creating $macc model for $add$modulos.v:84$114 ($add).
  creating $macc model for $add$modulos.v:84$119 ($add).
  creating $macc model for $add$modulos.v:84$123 ($add).
  creating $macc model for $add$modulos.v:84$124 ($add).
  creating $macc model for $add$modulos.v:84$128 ($add).
  creating $macc model for $add$modulos.v:84$129 ($add).
  creating $macc model for $add$modulos.v:84$133 ($add).
  creating $macc model for $add$modulos.v:84$134 ($add).
  creating $macc model for $add$modulos.v:84$138 ($add).
  creating $macc model for $add$modulos.v:84$139 ($add).
  creating $macc model for $add$modulos.v:84$143 ($add).
  creating $macc model for $add$modulos.v:84$144 ($add).
  creating $macc model for $add$modulos.v:84$148 ($add).
  creating $macc model for $add$modulos.v:84$149 ($add).
  creating $macc model for $add$modulos.v:84$153 ($add).
  creating $macc model for $add$modulos.v:84$154 ($add).
  creating $macc model for $add$modulos.v:84$158 ($add).
  creating $macc model for $add$modulos.v:84$159 ($add).
  creating $macc model for $add$modulos.v:84$163 ($add).
  creating $macc model for $add$modulos.v:84$164 ($add).
  creating $macc model for $add$modulos.v:84$168 ($add).
  creating $macc model for $add$modulos.v:84$169 ($add).
  creating $macc model for $add$modulos.v:84$173 ($add).
  creating $macc model for $add$modulos.v:84$174 ($add).
  creating $macc model for $add$modulos.v:84$178 ($add).
  creating $macc model for $add$modulos.v:84$179 ($add).
  creating $macc model for $add$modulos.v:84$183 ($add).
  creating $macc model for $add$modulos.v:84$184 ($add).
  creating $macc model for $add$modulos.v:84$188 ($add).
  creating $macc model for $add$modulos.v:84$189 ($add).
  creating $macc model for $add$modulos.v:84$193 ($add).
  creating $macc model for $add$modulos.v:84$194 ($add).
  creating $macc model for $add$modulos.v:84$198 ($add).
  creating $macc model for $add$modulos.v:84$199 ($add).
  creating $macc model for $add$modulos.v:84$203 ($add).
  creating $macc model for $add$modulos.v:84$204 ($add).
  creating $macc model for $add$modulos.v:84$208 ($add).
  creating $macc model for $add$modulos.v:84$209 ($add).
  creating $macc model for $add$modulos.v:84$213 ($add).
  creating $macc model for $add$modulos.v:84$214 ($add).
  creating $macc model for $add$modulos.v:84$218 ($add).
  creating $macc model for $add$modulos.v:84$219 ($add).
  creating $macc model for $add$modulos.v:84$223 ($add).
  creating $macc model for $add$modulos.v:84$224 ($add).
  creating $macc model for $add$modulos.v:84$228 ($add).
  creating $macc model for $add$modulos.v:84$229 ($add).
  creating $macc model for $add$modulos.v:84$233 ($add).
  creating $macc model for $add$modulos.v:84$234 ($add).
  creating $macc model for $add$modulos.v:84$238 ($add).
  creating $macc model for $add$modulos.v:84$239 ($add).
  creating $macc model for $add$modulos.v:84$243 ($add).
  creating $macc model for $add$modulos.v:84$244 ($add).
  creating $macc model for $add$modulos.v:84$248 ($add).
  creating $macc model for $add$modulos.v:84$249 ($add).
  creating $macc model for $add$modulos.v:84$253 ($add).
  creating $macc model for $add$modulos.v:84$254 ($add).
  creating $macc model for $add$modulos.v:84$258 ($add).
  creating $macc model for $add$modulos.v:84$259 ($add).
  creating $macc model for $add$modulos.v:84$263 ($add).
  creating $macc model for $add$modulos.v:84$264 ($add).
  creating $macc model for $add$modulos.v:84$268 ($add).
  creating $macc model for $add$modulos.v:84$269 ($add).
  creating $macc model for $add$modulos.v:87$270 ($add).
  creating $macc model for $add$modulos.v:88$271 ($add).
  creating $macc model for $add$modulos.v:89$272 ($add).
  merging $macc model for $add$modulos.v:84$269 into $add$modulos.v:89$272.
  merging $macc model for $add$modulos.v:84$268 into $add$modulos.v:89$272.
  merging $macc model for $add$modulos.v:84$263 into $add$modulos.v:84$264.
  merging $macc model for $add$modulos.v:84$258 into $add$modulos.v:84$259.
  merging $macc model for $add$modulos.v:84$253 into $add$modulos.v:84$254.
  merging $macc model for $add$modulos.v:84$248 into $add$modulos.v:84$249.
  merging $macc model for $add$modulos.v:84$243 into $add$modulos.v:84$244.
  merging $macc model for $add$modulos.v:84$238 into $add$modulos.v:84$239.
  merging $macc model for $add$modulos.v:84$233 into $add$modulos.v:84$234.
  merging $macc model for $add$modulos.v:84$228 into $add$modulos.v:84$229.
  merging $macc model for $add$modulos.v:84$223 into $add$modulos.v:84$224.
  merging $macc model for $add$modulos.v:84$218 into $add$modulos.v:84$219.
  merging $macc model for $add$modulos.v:84$213 into $add$modulos.v:84$214.
  merging $macc model for $add$modulos.v:84$208 into $add$modulos.v:84$209.
  merging $macc model for $add$modulos.v:84$203 into $add$modulos.v:84$204.
  merging $macc model for $add$modulos.v:84$198 into $add$modulos.v:84$199.
  merging $macc model for $add$modulos.v:84$193 into $add$modulos.v:84$194.
  merging $macc model for $add$modulos.v:84$188 into $add$modulos.v:84$189.
  merging $macc model for $add$modulos.v:84$183 into $add$modulos.v:84$184.
  merging $macc model for $add$modulos.v:84$178 into $add$modulos.v:84$179.
  merging $macc model for $add$modulos.v:84$173 into $add$modulos.v:84$174.
  merging $macc model for $add$modulos.v:84$168 into $add$modulos.v:84$169.
  merging $macc model for $add$modulos.v:84$163 into $add$modulos.v:84$164.
  merging $macc model for $add$modulos.v:84$158 into $add$modulos.v:84$159.
  merging $macc model for $add$modulos.v:84$153 into $add$modulos.v:84$154.
  merging $macc model for $add$modulos.v:84$148 into $add$modulos.v:84$149.
  merging $macc model for $add$modulos.v:84$143 into $add$modulos.v:84$144.
  merging $macc model for $add$modulos.v:84$138 into $add$modulos.v:84$139.
  merging $macc model for $add$modulos.v:84$133 into $add$modulos.v:84$134.
  merging $macc model for $add$modulos.v:84$128 into $add$modulos.v:84$129.
  merging $macc model for $add$modulos.v:84$123 into $add$modulos.v:84$124.
  creating $alu model for $macc $add$modulos.v:87$270.
  creating $alu model for $macc $add$modulos.v:88$271.
  creating $alu model for $macc $add$modulos.v:84$119.
  creating $alu model for $macc $add$modulos.v:84$114.
  creating $macc cell for $add$modulos.v:84$189: $auto$alumacc.cc:354:replace_macc$350
  creating $macc cell for $add$modulos.v:84$244: $auto$alumacc.cc:354:replace_macc$351
  creating $macc cell for $add$modulos.v:84$184: $auto$alumacc.cc:354:replace_macc$352
  creating $macc cell for $add$modulos.v:84$214: $auto$alumacc.cc:354:replace_macc$353
  creating $macc cell for $add$modulos.v:84$179: $auto$alumacc.cc:354:replace_macc$354
  creating $macc cell for $add$modulos.v:84$249: $auto$alumacc.cc:354:replace_macc$355
  creating $macc cell for $add$modulos.v:84$174: $auto$alumacc.cc:354:replace_macc$356
  creating $macc cell for $add$modulos.v:84$224: $auto$alumacc.cc:354:replace_macc$357
  creating $macc cell for $add$modulos.v:84$169: $auto$alumacc.cc:354:replace_macc$358
  creating $macc cell for $add$modulos.v:84$254: $auto$alumacc.cc:354:replace_macc$359
  creating $macc cell for $add$modulos.v:84$164: $auto$alumacc.cc:354:replace_macc$360
  creating $macc cell for $add$modulos.v:84$209: $auto$alumacc.cc:354:replace_macc$361
  creating $macc cell for $add$modulos.v:84$159: $auto$alumacc.cc:354:replace_macc$362
  creating $macc cell for $add$modulos.v:84$259: $auto$alumacc.cc:354:replace_macc$363
  creating $macc cell for $add$modulos.v:84$154: $auto$alumacc.cc:354:replace_macc$364
  creating $macc cell for $add$modulos.v:84$234: $auto$alumacc.cc:354:replace_macc$365
  creating $macc cell for $add$modulos.v:84$149: $auto$alumacc.cc:354:replace_macc$366
  creating $macc cell for $add$modulos.v:84$264: $auto$alumacc.cc:354:replace_macc$367
  creating $macc cell for $add$modulos.v:84$144: $auto$alumacc.cc:354:replace_macc$368
  creating $macc cell for $add$modulos.v:84$204: $auto$alumacc.cc:354:replace_macc$369
  creating $macc cell for $add$modulos.v:84$139: $auto$alumacc.cc:354:replace_macc$370
  creating $macc cell for $add$modulos.v:84$219: $auto$alumacc.cc:354:replace_macc$371
  creating $macc cell for $add$modulos.v:84$134: $auto$alumacc.cc:354:replace_macc$372
  creating $macc cell for $add$modulos.v:84$229: $auto$alumacc.cc:354:replace_macc$373
  creating $macc cell for $add$modulos.v:84$129: $auto$alumacc.cc:354:replace_macc$374
  creating $macc cell for $add$modulos.v:84$194: $auto$alumacc.cc:354:replace_macc$375
  creating $macc cell for $add$modulos.v:84$124: $auto$alumacc.cc:354:replace_macc$376
  creating $macc cell for $add$modulos.v:89$272: $auto$alumacc.cc:354:replace_macc$377
  creating $macc cell for $add$modulos.v:84$239: $auto$alumacc.cc:354:replace_macc$378
  creating $macc cell for $add$modulos.v:84$199: $auto$alumacc.cc:354:replace_macc$379
  creating $alu cell for $add$modulos.v:84$114: $auto$alumacc.cc:474:replace_alu$380
  creating $alu cell for $add$modulos.v:84$119: $auto$alumacc.cc:474:replace_alu$383
  creating $alu cell for $add$modulos.v:88$271: $auto$alumacc.cc:474:replace_alu$386
  creating $alu cell for $add$modulos.v:87$270: $auto$alumacc.cc:474:replace_alu$389
  created 4 $alu and 30 $macc cells.
Extracting $alu and $macc cells in module comparador_target_hash:
  creating $alu model for $lt$modulos.v:107$274 ($lt): new $alu
  creating $alu model for $lt$modulos.v:107$275 ($lt): new $alu
  creating $alu cell for $lt$modulos.v:107$275: $auto$alumacc.cc:474:replace_alu$394
  creating $alu cell for $lt$modulos.v:107$274: $auto$alumacc.cc:474:replace_alu$399
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module generar_W:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module micro_ucr_hash_mod:
  created 0 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
<suppressed ~1 debug messages>
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \algo_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comparador_target_hash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \generar_W..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash_mod..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module \algo_hash.
  Optimizing cells in module \comparador_target_hash.
  Optimizing cells in module \generar_W.
  Optimizing cells in module \micro_ucr_hash_mod.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..
Removed 32 unused cells and 35 unused wires.
<suppressed ~36 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \algo_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comparador_target_hash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \generar_W..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash_mod..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module \algo_hash.
  Optimizing cells in module \comparador_target_hash.
  Optimizing cells in module \generar_W.
  Optimizing cells in module \micro_ucr_hash_mod.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
<suppressed ~4 debug messages>
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
<suppressed ~435 debug messages>
Optimizing module comparador_target_hash.
<suppressed ~1 debug messages>
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..
Removed 0 unused cells and 122 unused wires.
<suppressed ~48 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \algo_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comparador_target_hash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \generar_W..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash_mod..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module \algo_hash.
  Optimizing cells in module \comparador_target_hash.
  Optimizing cells in module \generar_W.
  Optimizing cells in module \micro_ucr_hash_mod.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper maccmap for cells of type $macc.
  add $42\x_[7:0] (8 bits, unsigned)
  add \W [239:232] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $22\x_[7:0] (8 bits, unsigned)
  add \W [159:152] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $9\x_[7:0] (8 bits, unsigned)
  add \W [71:64] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $10\x_[7:0] (8 bits, unsigned)
  add \W [79:72] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $11\x_[7:0] (8 bits, unsigned)
  add \W [87:80] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $12\x_[7:0] (8 bits, unsigned)
  add \W [95:88] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $40\x_[7:0] (8 bits, unsigned)
  add \W [231:224] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $16\x_[7:0] (8 bits, unsigned)
  add \W [127:120] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $14\x_[7:0] (8 bits, unsigned)
  add \W [111:104] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $24\x_[7:0] (8 bits, unsigned)
  add \W [167:160] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $28\x_[7:0] (8 bits, unsigned)
  add \W [183:176] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
  add $18\x_[7:0] (8 bits, unsigned)
  add \W [143:136] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $34\x_[7:0] (8 bits, unsigned)
  add \W [207:200] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add \x_ (8 bits, unsigned)
  add \W [255:248] (8 bits, unsigned)
  add 8'10011111 (8 bits, unsigned)
  add $6\x_[7:0] (8 bits, unsigned)
  add \W [47:40] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $3\x_[7:0] (8 bits, unsigned)
  add \W [23:16] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $17\x_[7:0] (8 bits, unsigned)
  add \W [135:128] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $4\x_[7:0] (8 bits, unsigned)
  add \W [31:24] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $30\x_[7:0] (8 bits, unsigned)
  add \W [191:184] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $5\x_[7:0] (8 bits, unsigned)
  add \W [39:32] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $26\x_[7:0] (8 bits, unsigned)
  add \W [175:168] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $7\x_[7:0] (8 bits, unsigned)
  add \W [55:48] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $20\x_[7:0] (8 bits, unsigned)
  add \W [151:144] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $44\x_[7:0] (8 bits, unsigned)
  add \W [247:240] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $8\x_[7:0] (8 bits, unsigned)
  add \W [63:56] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $32\x_[7:0] (8 bits, unsigned)
  add \W [199:192] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $38\x_[7:0] (8 bits, unsigned)
  add \W [223:216] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $36\x_[7:0] (8 bits, unsigned)
  add \W [215:208] (8 bits, unsigned)
  add 8'10100001 (8 bits, unsigned)
  add $13\x_[7:0] (8 bits, unsigned)
  add \W [103:96] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
  add $15\x_[7:0] (8 bits, unsigned)
  add \W [119:112] (8 bits, unsigned)
  add 8'10011001 (8 bits, unsigned)
Using template $paramod\_90_fa\WIDTH=8 for cells of type $fa.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
No more expansions possible.
<suppressed ~2323 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
<suppressed ~398 debug messages>
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
<suppressed ~1238 debug messages>
Optimizing module comparador_target_hash.
<suppressed ~20 debug messages>
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
<suppressed ~84 debug messages>
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
<suppressed ~15 debug messages>
Finding identical cells in module `\comparador_target_hash'.
<suppressed ~24 debug messages>
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 41 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..
Removed 703 unused cells and 1830 unused wires.
<suppressed ~706 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4' to `<abc-temp-dir>/input.blif'..
Extracted 152 gates and 218 wires to a netlist network with 65 inputs and 32 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:               MUX cells:       61
ABC RESULTS:              NAND cells:       14
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:       22
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:               XOR cells:       16
ABC RESULTS:        internal signals:      121
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

3.23.2. Extracting gate netlist of module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4' to `<abc-temp-dir>/input.blif'..
Extracted 99 gates and 200 wires to a netlist network with 100 inputs and 25 outputs.

3.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       24
ABC RESULTS:               MUX cells:       72
ABC RESULTS:                OR cells:        3
ABC RESULTS:        internal signals:       75
ABC RESULTS:           input signals:      100
ABC RESULTS:          output signals:       25
Removing temp directory.

3.23.3. Extracting gate netlist of module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.23.4. Extracting gate netlist of module `\algo_hash' to `<abc-temp-dir>/input.blif'..
Extracted 1972 gates and 2229 wires to a netlist network with 256 inputs and 20 outputs.

3.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       54
ABC RESULTS:            ANDNOT cells:      445
ABC RESULTS:              AOI3 cells:       91
ABC RESULTS:              NAND cells:       56
ABC RESULTS:               NOR cells:       93
ABC RESULTS:               NOT cells:      118
ABC RESULTS:              OAI3 cells:       31
ABC RESULTS:                OR cells:       54
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:              XNOR cells:      221
ABC RESULTS:               XOR cells:      611
ABC RESULTS:        internal signals:     1953
ABC RESULTS:           input signals:      256
ABC RESULTS:          output signals:       20
Removing temp directory.

3.23.5. Extracting gate netlist of module `\comparador_target_hash' to `<abc-temp-dir>/input.blif'..
Extracted 105 gates and 138 wires to a netlist network with 32 inputs and 25 outputs.

3.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.5.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       28
ABC RESULTS:              AOI3 cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        5
ABC RESULTS:              OAI3 cells:       10
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:       14
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       12
ABC RESULTS:        internal signals:       81
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       25
Removing temp directory.

3.23.6. Extracting gate netlist of module `\generar_W' to `<abc-temp-dir>/input.blif'..
Extracted 256 gates and 368 wires to a netlist network with 112 inputs and 128 outputs.

3.23.6.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       16
ABC RESULTS:               NOT cells:       32
ABC RESULTS:                OR cells:       96
ABC RESULTS:             ORNOT cells:       16
ABC RESULTS:              XNOR cells:       32
ABC RESULTS:               XOR cells:       96
ABC RESULTS:        internal signals:      128
ABC RESULTS:           input signals:      112
ABC RESULTS:          output signals:      128
Removing temp directory.

3.23.7. Extracting gate netlist of module `\micro_ucr_hash_mod' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
<suppressed ~30 debug messages>
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..
Removed 1 unused cells and 1531 unused wires.
<suppressed ~7 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \micro_ucr_hash_mod
Used module:     $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4
Used module:     $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4
Used module:         \algo_hash
Used module:         $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4
Used module:         \comparador_target_hash
Used module:         \generar_W

3.25.2. Analyzing design hierarchy..
Top module:  \micro_ucr_hash_mod
Used module:     $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4
Used module:     $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4
Used module:         \algo_hash
Used module:         $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4
Used module:         \comparador_target_hash
Used module:         \generar_W
Removed 0 unused modules.

3.26. Printing statistics.

=== $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4 ===

   Number of wires:                124
   Number of wire bits:            439
   Number of public wires:           6
   Number of public wire bits:     290
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                181
     $_ANDNOT_                      17
     $_AND_                          3
     $_DFF_P_                       32
     $_MUX_                         61
     $_NAND_                        14
     $_NOR_                          1
     $_OAI3_                         1
     $_OR_                          22
     $_XNOR_                        14
     $_XOR_                         16

=== $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4 ===

   Number of wires:                 81
   Number of wire bits:            233
   Number of public wires:           7
   Number of public wire bits:     159
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 99
     $_AND_                         24
     $_MUX_                         72
     $_OR_                           3

=== $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4 ===

   Number of wires:                 10
   Number of wire bits:            571
   Number of public wires:          10
   Number of public wire bits:     571
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4      1
     algo_hash                       1
     comparador_target_hash          1
     generar_W                       1

=== algo_hash ===

   Number of wires:               1772
   Number of wire bits:           2125
   Number of public wires:           7
   Number of public wire bits:     360
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1785
     $_ANDNOT_                     445
     $_AND_                         54
     $_AOI3_                        91
     $_NAND_                        56
     $_NOR_                         93
     $_NOT_                        118
     $_OAI3_                        31
     $_ORNOT_                       11
     $_OR_                          54
     $_XNOR_                       221
     $_XOR_                        611

=== comparador_target_hash ===

   Number of wires:                 57
   Number of wire bits:            110
   Number of public wires:           4
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 78
     $_ANDNOT_                      28
     $_AOI3_                         4
     $_NAND_                         2
     $_NOR_                          5
     $_OAI3_                        10
     $_ORNOT_                       14
     $_OR_                           1
     $_XNOR_                         2
     $_XOR_                         12

=== generar_W ===

   Number of wires:                163
   Number of wire bits:            576
   Number of public wires:           3
   Number of public wire bits:     416
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                288
     $_ANDNOT_                      16
     $_NOT_                         32
     $_ORNOT_                       16
     $_OR_                          96
     $_XNOR_                        32
     $_XOR_                         96

=== micro_ucr_hash_mod ===

   Number of wires:                  9
   Number of wire bits:            359
   Number of public wires:           9
   Number of public wire bits:     359
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4      1
     $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4      4

=== design hierarchy ===

   micro_ucr_hash_mod                1
     $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4      1
     $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4      4
       $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4      1
       algo_hash                     1
       comparador_target_hash        1
       generar_W                     1

   Number of wires:               8594
   Number of wire bits:          15876
   Number of public wires:         136
   Number of public wire bits:    7294
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               9427
     $_ANDNOT_                    2024
     $_AND_                        252
     $_AOI3_                       380
     $_DFF_P_                      128
     $_MUX_                        316
     $_NAND_                       288
     $_NOR_                        396
     $_NOT_                        600
     $_OAI3_                       168
     $_ORNOT_                      164
     $_OR_                         695
     $_XNOR_                      1076
     $_XOR_                       2940

3.27. Executing CHECK pass (checking for obvious problems).
checking module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
checking module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
checking module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
checking module algo_hash..
checking module comparador_target_hash..
checking module generar_W..
checking module micro_ucr_hash_mod..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4':
  mapped 32 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4':
Mapping DFF cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4':
Mapping DFF cells in module `\algo_hash':
Mapping DFF cells in module `\comparador_target_hash':
Mapping DFF cells in module `\generar_W':
Mapping DFF cells in module `\micro_ucr_hash_mod':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \algo_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comparador_target_hash..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \generar_W..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \micro_ucr_hash_mod..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
  Optimizing cells in module \algo_hash.
  Optimizing cells in module \comparador_target_hash.
  Optimizing cells in module \generar_W.
  Optimizing cells in module \micro_ucr_hash_mod.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4'.
Finding identical cells in module `\algo_hash'.
Finding identical cells in module `\comparador_target_hash'.
Finding identical cells in module `\generar_W'.
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4..
Finding unused cells or wires in module \algo_hash..
Finding unused cells or wires in module \comparador_target_hash..
Finding unused cells or wires in module \generar_W..
Finding unused cells or wires in module \micro_ucr_hash_mod..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Optimizing module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Optimizing module algo_hash.
Optimizing module comparador_target_hash.
Optimizing module generar_W.
Optimizing module micro_ucr_hash_mod.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `$paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4' to `<abc-temp-dir>/input.blif'..
Extracted 149 gates and 214 wires to a netlist network with 65 inputs and 32 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        8
ABC RESULTS:           AOI21X1 cells:       40
ABC RESULTS:             INVX1 cells:       29
ABC RESULTS:            MUX2X1 cells:        2
ABC RESULTS:           NAND2X1 cells:       37
ABC RESULTS:           NAND3X1 cells:       13
ABC RESULTS:            NOR2X1 cells:       49
ABC RESULTS:            NOR3X1 cells:        4
ABC RESULTS:           OAI21X1 cells:       12
ABC RESULTS:             OR2X2 cells:        8
ABC RESULTS:           XNOR2X1 cells:        8
ABC RESULTS:            XOR2X1 cells:        3
ABC RESULTS:        internal signals:      117
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

6.2. Extracting gate netlist of module `$paramod\control_bounty\NUM_BLOQUES_PARALELOS=4' to `<abc-temp-dir>/input.blif'..
Extracted 99 gates and 199 wires to a netlist network with 100 inputs and 25 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:       48
ABC RESULTS:             INVX1 cells:       24
ABC RESULTS:           NAND2X1 cells:       97
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:           OAI21X1 cells:       24
ABC RESULTS:        internal signals:       74
ABC RESULTS:           input signals:      100
ABC RESULTS:          output signals:       25
Removing temp directory.

6.3. Extracting gate netlist of module `$paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.4. Extracting gate netlist of module `\algo_hash' to `<abc-temp-dir>/input.blif'..
Extracted 1785 gates and 2041 wires to a netlist network with 256 inputs and 20 outputs.

6.4.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       76
ABC RESULTS:           AOI21X1 cells:      521
ABC RESULTS:           AOI22X1 cells:       10
ABC RESULTS:             INVX1 cells:      627
ABC RESULTS:           NAND2X1 cells:      464
ABC RESULTS:           NAND3X1 cells:      944
ABC RESULTS:            NOR2X1 cells:      265
ABC RESULTS:            NOR3X1 cells:      105
ABC RESULTS:           OAI21X1 cells:      632
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:             OR2X2 cells:       78
ABC RESULTS:           XNOR2X1 cells:       78
ABC RESULTS:            XOR2X1 cells:       28
ABC RESULTS:        internal signals:     1765
ABC RESULTS:           input signals:      256
ABC RESULTS:          output signals:       20
Removing temp directory.

6.5. Extracting gate netlist of module `\comparador_target_hash' to `<abc-temp-dir>/input.blif'..
Extracted 78 gates and 110 wires to a netlist network with 32 inputs and 25 outputs.

6.5.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.5.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        7
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:             INVX1 cells:       32
ABC RESULTS:           NAND2X1 cells:       12
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR2X1 cells:        7
ABC RESULTS:            NOR3X1 cells:       24
ABC RESULTS:           OAI21X1 cells:        6
ABC RESULTS:           OAI22X1 cells:        9
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:        internal signals:       53
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       25
Removing temp directory.

6.6. Extracting gate netlist of module `\generar_W' to `<abc-temp-dir>/input.blif'..
Extracted 288 gates and 400 wires to a netlist network with 112 inputs and 128 outputs.

6.6.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.6.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       16
ABC RESULTS:           AOI21X1 cells:       40
ABC RESULTS:             INVX1 cells:       96
ABC RESULTS:           NAND2X1 cells:       45
ABC RESULTS:           NAND3X1 cells:       26
ABC RESULTS:            NOR2X1 cells:       29
ABC RESULTS:           OAI21X1 cells:       41
ABC RESULTS:             OR2X2 cells:       23
ABC RESULTS:           XNOR2X1 cells:       34
ABC RESULTS:            XOR2X1 cells:       12
ABC RESULTS:        internal signals:      160
ABC RESULTS:           input signals:      112
ABC RESULTS:          output signals:      128
Removing temp directory.

6.7. Extracting gate netlist of module `\micro_ucr_hash_mod' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Using template $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4 for cells of type $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Using template $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4 for cells of type $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Using template $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4 for cells of type $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Using template generar_W for cells of type generar_W.
Using template algo_hash for cells of type algo_hash.
Using template comparador_target_hash for cells of type comparador_target_hash.
<suppressed ~21 debug messages>
No more expansions possible.
Deleting now unused module $paramod\cargar_datos_mod\NUM_BLOQUES_PARALELOS=4.
Deleting now unused module $paramod\control_bounty\NUM_BLOQUES_PARALELOS=4.
Deleting now unused module $paramod\micro_ucr_hash_mod_module\NUM_BLOQUES_PARALELOS=4.
Deleting now unused module algo_hash.
Deleting now unused module comparador_target_hash.
Deleting now unused module generar_W.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 11375 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port micro_ucr_hash_mod.bloque_datos: Missing option -inpad.
Mapping port micro_ucr_hash_mod.bounty_out using BUFX2.
Don't map input port micro_ucr_hash_mod.clk: Missing option -inpad.
Don't map input port micro_ucr_hash_mod.inicio: Missing option -inpad.
Don't map input port micro_ucr_hash_mod.nonce_iniciales: Missing option -inpad.
Don't map input port micro_ucr_hash_mod.target: Missing option -inpad.
Mapping port micro_ucr_hash_mod.terminado_out using BUFX2.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module micro_ucr_hash_mod.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \micro_ucr_hash_mod..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \micro_ucr_hash_mod.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\micro_ucr_hash_mod'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \micro_ucr_hash_mod..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module micro_ucr_hash_mod.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== micro_ucr_hash_mod ===

   Number of wires:              17412
   Number of wire bits:          19018
   Number of public wires:       17412
   Number of public wire bits:   19018
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              18384
     AND2X2                        404
     AOI21X1                      2480
     AOI22X1                        48
     BUFX2                          25
     DFFPOSX1                      128
     INVX1                        3160
     MUX2X1                          8
     NAND2X1                      2329
     NAND3X1                      3940
     NOR2X1                       1402
     NOR3X1                        532
     OAI21X1                      2788
     OAI22X1                        44
     OR2X2                         436
     XNOR2X1                       480
     XOR2X1                        180

Warnings: 1 unique messages, 6 total
End of script. Logfile hash: 49c3d2c37b
CPU: user 6.09s system 0.24s, MEM: 75.34 MB total, 67.36 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 18% 2x clean (1 sec), 18% 18x opt_clean (1 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl micro_ucr_hash_mod_mapped.blif micro_ucr_hash_mod /usr/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I micro_ucr_hash_mod_nofanout -s nullstring -p /usr/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif micro_ucr_hash_mod.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 49 (load 889.827) from node module_2.comparador_target_hash_0.terminado,
driven by NOR2X1 with strength 58.1923 (fF driven at latency 100)
Top fanout load-to-strength ratio is 15.2912 (latency = 1529.12 ps)
Top input node fanout is 128 (load 3574.21) from node inicio.
Warning 1: load of 124.418 is 1.11934 times greater than strongest gate OR2X2
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 129.724 is 2.22133 times greater than strongest gate NAND2X1
Warning 59: load of 148.7 is 2.54627 times greater than strongest gate NAND2X1
Warning 154: load of 157.421 is 2.73211 times greater than strongest gate NAND3X1
Warning 509: load of 166.738 is 2.8653 times greater than strongest gate NOR2X1
Warning 1108: load of 170.847 is 2.89145 times greater than strongest gate XNOR2X1
Warning 1145: load of 168.81 is 2.92978 times greater than strongest gate NAND3X1
Warning 1486: load of 417.774 is 6.2858 times greater than strongest gate AOI21X1
Warning 1558: load of 523.574 is 8.97779 times greater than strongest gate OAI21X1
Warning 1560: load of 547.519 is 9.38836 times greater than strongest gate OAI21X1
Warning 3267: load of 899.827 is 15.463 times greater than strongest gate NOR2X1
6824 gates exceed specified minimum load.
474 buffers were added.
632 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 17519    	Out: 16887    	-632
	"2" gates	In: 1265    	Out: 1881    	+616

Number of gates changed: 1106
gates resized: 1106
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 13 (load 624.527) from node module_0.W[0],
driven by DFFPOSX1 with strength 126.421 (fF driven at latency 100)
Top fanout load-to-strength ratio is 2.91819 (latency = 291.819 ps)
Top input node fanout is 16 (load 448.563) from node bloque_datos[10].
Warning 1: load of 232.765 is 1.03456 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 237.166 is 1.05412 times greater than strongest gate BUFX4
Warning 3: load of 634.527 is 2.73957 times greater than strongest gate CLKBUF1
Warning 184: load of 166.753 is 2.89408 times greater than strongest gate NAND3X1
Warning 540: load of 176.07 is 3.02566 times greater than strongest gate NOR2X1
Warning 1177: load of 178.142 is 3.09174 times greater than strongest gate NAND3X1
6874 gates exceed specified minimum load.
0 buffers were added.
467 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 16898    	Out: 16894    	-4
	"2" gates	In: 2344    	Out: 1885    	-459
	"4" gates	In: 16    	Out: 479    	+463

Number of gates changed: 467
gates resized: 467
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 13 (load 624.527) from node module_0.W[0],
driven by DFFPOSX1 with strength 126.421 (fF driven at latency 100)
Top fanout load-to-strength ratio is 2.91819 (latency = 291.819 ps)
Top input node fanout is 16 (load 448.563) from node bloque_datos[10].
Warning 1: load of 295.098 is 1.31161 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 334.5 is 1.48674 times greater than strongest gate BUFX4
Warning 17: load of 344.579 is 1.53154 times greater than strongest gate BUFX4
Warning 60: load of 348.98 is 1.5511 times greater than strongest gate BUFX4
Warning 92: load of 634.527 is 2.73957 times greater than strongest gate CLKBUF1
Warning 628: load of 166.753 is 2.89408 times greater than strongest gate NAND3X1
Warning 984: load of 176.07 is 3.02566 times greater than strongest gate NOR2X1
Warning 1621: load of 178.142 is 3.09174 times greater than strongest gate NAND3X1
7322 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 16894    	Out: 16894    	+0
	"2" gates	In: 1885    	Out: 1885    	+0
	"4" gates	In: 479    	Out: 479    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/isaac/Desktop/Microelectrónica/Proyecto/Parte_2/performance_micro_ucr_hash/synthesis
Files:
   Verilog: /home/isaac/Desktop/Microelectrónica/Proyecto/Parte_2/performance_micro_ucr_hash/synthesis/micro_ucr_hash_mod.rtl.v
   Verilog: /home/isaac/Desktop/Microelectrónica/Proyecto/Parte_2/performance_micro_ucr_hash/synthesis/micro_ucr_hash_mod.rtlnopwr.v
   Verilog: /home/isaac/Desktop/Microelectrónica/Proyecto/Parte_2/performance_micro_ucr_hash/synthesis/micro_ucr_hash_mod.rtlbb.v
   Spice:   /home/isaac/Desktop/Microelectrónica/Proyecto/Parte_2/performance_micro_ucr_hash/synthesis/micro_ucr_hash_mod.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f micro_ucr_hash_mod.spc micro_ucr_hash_mod.xspice

Synthesis script ended on dom 25 jul 23:50:17 CST 2021
